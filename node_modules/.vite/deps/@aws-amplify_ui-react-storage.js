import {
  Alert,
  Button,
  ComponentClassName,
  IconCheck,
  IconClose,
  IconError,
  Image,
  Loader,
  Text,
  View,
  VisuallyHidden,
  classNameModifier,
  classNames,
  getLogger,
  humanFileSize,
  isFunction,
  isObject,
  isString,
  useDeprecationWarning,
  useDeprecationWarning2,
  useDropZone,
  useGetUrl,
  useIcons,
  useSetUserAgent
} from "./chunk-5JTKX4RY.js";
import {
  uploadData
} from "./chunk-EC4Z7XOV.js";
import "./chunk-EQCCHGRT.js";
import "./chunk-6VWAHX6D.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import "./chunk-DOVADADO.js";
import "./chunk-5YXTIY23.js";
import {
  fetchAuthSession2 as fetchAuthSession
} from "./chunk-7M27YW6Y.js";
import "./chunk-CGBICEAA.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/FileUploader.mjs
var React10 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/hooks/useFileUploader/useFileUploader.mjs
var import_react = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/types.mjs
var FileStatus;
(function(FileStatus2) {
  FileStatus2["ADDED"] = "added";
  FileStatus2["QUEUED"] = "queued";
  FileStatus2["UPLOADING"] = "uploading";
  FileStatus2["PAUSED"] = "paused";
  FileStatus2["ERROR"] = "error";
  FileStatus2["UPLOADED"] = "uploaded";
})(FileStatus || (FileStatus = {}));

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/hooks/useFileUploader/types.mjs
var FileUploaderActionTypes;
(function(FileUploaderActionTypes2) {
  FileUploaderActionTypes2[FileUploaderActionTypes2["ADD_FILES"] = 0] = "ADD_FILES";
  FileUploaderActionTypes2[FileUploaderActionTypes2["CLEAR_FILES"] = 1] = "CLEAR_FILES";
  FileUploaderActionTypes2[FileUploaderActionTypes2["QUEUE_FILES"] = 2] = "QUEUE_FILES";
  FileUploaderActionTypes2[FileUploaderActionTypes2["REMOVE_UPLOAD"] = 3] = "REMOVE_UPLOAD";
  FileUploaderActionTypes2[FileUploaderActionTypes2["SET_STATUS"] = 4] = "SET_STATUS";
  FileUploaderActionTypes2[FileUploaderActionTypes2["SET_PROCESSED_FILE_KEY"] = 5] = "SET_PROCESSED_FILE_KEY";
  FileUploaderActionTypes2[FileUploaderActionTypes2["SET_STATUS_UPLOADED"] = 6] = "SET_STATUS_UPLOADED";
  FileUploaderActionTypes2[FileUploaderActionTypes2["SET_STATUS_UPLOADING"] = 7] = "SET_STATUS_UPLOADING";
  FileUploaderActionTypes2[FileUploaderActionTypes2["SET_UPLOAD_PROGRESS"] = 8] = "SET_UPLOAD_PROGRESS";
})(FileUploaderActionTypes || (FileUploaderActionTypes = {}));

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/hooks/useFileUploader/reducer.mjs
var updateFiles = (files, nextFileData) => files.reduce((files2, currentFile) => {
  if (currentFile.id === nextFileData.id) {
    return [...files2, { ...currentFile, ...nextFileData }];
  }
  return [...files2, currentFile];
}, []);
function fileUploaderStateReducer(state, action) {
  switch (action.type) {
    case FileUploaderActionTypes.ADD_FILES: {
      const { files, status } = action;
      const newUploads = files.map((file) => {
        const errorText = action.getFileErrorMessage(file);
        return {
          // make sure id is unique,
          // we only use it internally and don't send it to Storage
          id: `${Date.now()}-${file.name}`,
          file,
          error: errorText,
          key: file.name,
          status: errorText ? FileStatus.ERROR : status,
          isImage: file.type.startsWith("image/"),
          progress: -1
        };
      });
      const newFiles = [...state.files, ...newUploads];
      return { ...state, files: newFiles };
    }
    case FileUploaderActionTypes.CLEAR_FILES: {
      return { ...state, files: [] };
    }
    case FileUploaderActionTypes.QUEUE_FILES: {
      const { files } = state;
      const newFiles = files.reduce((files2, currentFile) => [
        ...files2,
        {
          ...currentFile,
          ...currentFile.status === FileStatus.ADDED ? { status: FileStatus.QUEUED } : {}
        }
      ], []);
      return { ...state, files: newFiles };
    }
    case FileUploaderActionTypes.SET_STATUS_UPLOADING: {
      const { id, uploadTask } = action;
      const status = FileStatus.UPLOADING;
      const progress = 0;
      const nextFileData = { status, progress, id, uploadTask };
      const files = updateFiles(state.files, nextFileData);
      return { ...state, files };
    }
    case FileUploaderActionTypes.SET_STATUS_UPLOADED: {
      const files = updateFiles(state.files, action);
      return { ...state, files };
    }
    case FileUploaderActionTypes.SET_UPLOAD_PROGRESS: {
      const { id, progress } = action;
      const files = updateFiles(state.files, { id, progress });
      return { ...state, files };
    }
    case FileUploaderActionTypes.SET_STATUS: {
      const { id, status } = action;
      const files = updateFiles(state.files, { id, status });
      return { ...state, files };
    }
    case FileUploaderActionTypes.REMOVE_UPLOAD: {
      const { id } = action;
      const { files } = state;
      const newFiles = files.reduce((files2, currentFile) => {
        return currentFile.id === id ? [...files2] : [...files2, currentFile];
      }, []);
      return { ...state, files: newFiles };
    }
  }
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/hooks/useFileUploader/actions.mjs
var addFilesAction = ({ files, status, getFileErrorMessage }) => ({
  type: FileUploaderActionTypes.ADD_FILES,
  files,
  status,
  getFileErrorMessage
});
var clearFilesAction = () => ({
  type: FileUploaderActionTypes.CLEAR_FILES
});
var queueFilesAction = () => ({
  type: FileUploaderActionTypes.QUEUE_FILES
});
var setUploadingFileAction = ({ id, uploadTask }) => ({
  type: FileUploaderActionTypes.SET_STATUS_UPLOADING,
  id,
  uploadTask
});
var setUploadProgressAction = ({ id, progress }) => ({
  type: FileUploaderActionTypes.SET_UPLOAD_PROGRESS,
  id,
  progress
});
var setUploadStatusAction = ({ id, status }) => ({
  type: FileUploaderActionTypes.SET_STATUS,
  id,
  status
});
var setUploadSuccessAction = ({ id, resolvedKey }) => ({
  type: FileUploaderActionTypes.SET_STATUS_UPLOADED,
  id,
  resolvedKey,
  status: FileStatus.UPLOADED
});
var removeUploadAction = ({ id }) => ({
  type: FileUploaderActionTypes.REMOVE_UPLOAD,
  id
});

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/hooks/useFileUploader/useFileUploader.mjs
var isDefaultFile = (file) => !!(isObject(file) && file.key);
var createFileFromDefault = (file) => isDefaultFile(file) ? { ...file, id: file.key, status: FileStatus.UPLOADED } : void 0;
function useFileUploader(defaultFiles = []) {
  const [{ files }, dispatch] = import_react.default.useReducer(fileUploaderStateReducer, {
    files: Array.isArray(defaultFiles) ? defaultFiles.map(createFileFromDefault).filter((file) => !!file) : []
  });
  const dispatchers = import_react.default.useMemo(() => ({
    addFiles: (params) => {
      dispatch(addFilesAction(params));
    },
    clearFiles: () => {
      dispatch(clearFilesAction());
    },
    queueFiles: () => {
      dispatch(queueFilesAction());
    },
    setUploadingFile: (params) => {
      dispatch(setUploadingFileAction(params));
    },
    setUploadProgress: (params) => {
      dispatch(setUploadProgressAction(params));
    },
    setUploadSuccess: (params) => {
      dispatch(setUploadSuccessAction(params));
    },
    setUploadPaused: ({ id }) => {
      dispatch(setUploadStatusAction({ id, status: FileStatus.PAUSED }));
    },
    setUploadResumed: ({ id }) => {
      dispatch(setUploadStatusAction({ id, status: FileStatus.UPLOADING }));
    },
    removeUpload: ({ id }) => {
      dispatch(removeUploadAction({ id }));
    }
  }), []);
  return { ...dispatchers, files };
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/hooks/useUploadFiles/useUploadFiles.mjs
var React = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/utils/resolveFile.mjs
var resolveFile = ({ processFile, ...input }) => {
  return new Promise((resolve, reject) => {
    const result = isFunction(processFile) ? processFile(input) : input;
    if (result instanceof Promise) {
      result.then(resolve).catch(reject);
    } else {
      resolve(result);
    }
  });
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/utils/getInput.mjs
var getInput = ({ accessLevel, file, key, onProgress, path, processFile, useAccelerateEndpoint }) => {
  return async () => {
    const hasCallbackPath = isFunction(path);
    const hasStringPath = isString(path);
    const hasKeyInput = !!accessLevel && !hasCallbackPath;
    const { file: data, key: processedKey, ...rest } = await resolveFile({ file, key, processFile });
    const contentType = file.type || "binary/octet-stream";
    const options = { contentType, onProgress, useAccelerateEndpoint, ...rest };
    let inputResult;
    if (hasKeyInput) {
      const resolvedKey = hasStringPath ? `${path}${processedKey}` : processedKey;
      inputResult = {
        data,
        key: resolvedKey,
        options: { ...options, accessLevel }
      };
    } else {
      const { identityId } = await fetchAuthSession();
      const resolvedPath = `${hasCallbackPath ? path({ identityId }) : path}${processedKey}`;
      inputResult = { data: file, path: resolvedPath, options };
    }
    return inputResult;
  };
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/utils/uploadFile.mjs
async function uploadFile({ input, onError, onStart, onComplete }) {
  const resolvedInput = await input();
  const uploadTask = uploadData(resolvedInput);
  const key = (resolvedInput == null ? void 0 : resolvedInput.key) ?? (resolvedInput == null ? void 0 : resolvedInput.path);
  if (isFunction(onStart)) {
    onStart({ key, uploadTask });
  }
  uploadTask.result.then((result) => {
    if (isFunction(onComplete) && uploadTask.state === "SUCCESS") {
      onComplete(result);
    }
  }).catch((error) => {
    if (isFunction(onError)) {
      onError({ key, error });
    }
  });
  return uploadTask;
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/hooks/useUploadFiles/useUploadFiles.mjs
function useUploadFiles({ accessLevel, files, isResumable, maxFileCount, onUploadError, onUploadStart, onUploadSuccess, path, processFile, setUploadingFile, setUploadProgress, setUploadSuccess, useAccelerateEndpoint }) {
  React.useEffect(() => {
    const filesReadyToUpload = files.filter((file) => file.status === FileStatus.QUEUED);
    if (filesReadyToUpload.length > maxFileCount) {
      return;
    }
    for (const { file, key, id } of filesReadyToUpload) {
      const onProgress = (event) => {
        const progress = event.totalBytes === void 0 || event.totalBytes === 0 ? 100 : Math.floor(event.transferredBytes / event.totalBytes * 100);
        setUploadProgress({ id, progress });
      };
      if (file) {
        const input = getInput({
          accessLevel,
          file,
          key,
          onProgress,
          path,
          processFile,
          useAccelerateEndpoint
        });
        uploadFile({
          input,
          onComplete: (event) => {
            const resolvedKey = event.key ?? event.path;
            if (isFunction(onUploadSuccess)) {
              onUploadSuccess({ key: resolvedKey });
            }
            setUploadSuccess({ id, resolvedKey });
          },
          onError: ({ key: key2, error }) => {
            if (isFunction(onUploadError)) {
              onUploadError(error.message, { key: key2 });
            }
          },
          onStart: ({ key: key2, uploadTask }) => {
            if (isFunction(onUploadStart)) {
              onUploadStart({ key: key2 });
            }
            setUploadingFile({ id, uploadTask });
          }
        });
      }
    }
  }, [
    files,
    accessLevel,
    isResumable,
    setUploadProgress,
    setUploadingFile,
    onUploadError,
    onUploadSuccess,
    onUploadStart,
    maxFileCount,
    setUploadSuccess,
    processFile,
    path,
    useAccelerateEndpoint
  ]);
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/Container/Container.mjs
var import_react2 = __toESM(require_react(), 1);
function Container({ children, className }) {
  return import_react2.default.createElement(View, { className }, children);
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/DropZone/DropZone.mjs
var import_react4 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/hooks/useStorageURL.mjs
var React2 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/FilterChildren/FilterChildren.mjs
var import_react3 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconAssistant.mjs
var React3 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconAttach.mjs
var React4 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconCheckCircleOutline.mjs
var React5 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconEdit.mjs
var React6 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconFile.mjs
var React7 = __toESM(require_react(), 1);
var IconFile = (props) => {
  const { className, ...rest } = props;
  return React7.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React7.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React7.createElement("path", { d: "M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconSend.mjs
var React8 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconUpload.mjs
var React9 = __toESM(require_react(), 1);
var IconUpload = (props) => {
  const { className, ...rest } = props;
  return React9.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React9.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React9.createElement("path", { d: "M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm4 18H6V4h7v5h5v11zM8 15.01l1.41 1.41L11 14.84V19h2v-4.16l1.59 1.59L16 15.01 12.01 11 8 15.01z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/DropZone/DropZone.mjs
function DropZone({ children, displayText, inDropZone, onDragEnter, onDragLeave, onDragOver, onDragStart, onDrop, testId }) {
  const { dropFilesText } = displayText;
  const icons = useIcons("storageManager");
  return import_react4.default.createElement(
    View,
    { className: classNames(inDropZone && classNameModifier(ComponentClassName.FileUploaderDropZone, "active"), ComponentClassName.FileUploaderDropZone), "data-testid": testId, onDragStart, onDragEnter, onDragLeave, onDrop, onDragOver },
    import_react4.default.createElement(View, { as: "span", "aria-hidden": true, className: ComponentClassName.FileUploaderDropZoneIcon }, (icons == null ? void 0 : icons.upload) ?? import_react4.default.createElement(IconUpload, null)),
    import_react4.default.createElement(Text, { className: ComponentClassName.FileUploaderDropZoneText }, dropFilesText),
    children
  );
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileList/FileList.mjs
var import_react10 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileList/FileControl.mjs
var import_react9 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileList/FileStatusMessage.mjs
var import_react5 = __toESM(require_react(), 1);
var FileStatusMessage = ({ errorMessage, getPausedText, getUploadingText, percentage, status, uploadSuccessfulText }) => {
  const icons = useIcons("storageManager");
  switch (status) {
    case FileStatus.UPLOADING: {
      return import_react5.default.createElement(Text, { className: ComponentClassName.FileUploaderFileStatus }, getUploadingText(percentage));
    }
    case FileStatus.PAUSED:
      return import_react5.default.createElement(Text, { className: ComponentClassName.FileUploaderFileStatus }, getPausedText(percentage));
    case FileStatus.UPLOADED:
      return import_react5.default.createElement(
        Text,
        { className: classNames(ComponentClassName.FileUploaderFileStatus, classNameModifier(ComponentClassName.FileUploaderFileStatus, "success")) },
        import_react5.default.createElement(View, { as: "span", fontSize: "xl" }, (icons == null ? void 0 : icons.success) ?? import_react5.default.createElement(IconCheck, null)),
        uploadSuccessfulText
      );
    case FileStatus.ERROR:
      return import_react5.default.createElement(
        Text,
        { className: classNames(ComponentClassName.FileUploaderFileStatus, classNameModifier(ComponentClassName.FileUploaderFileStatus, "error")) },
        import_react5.default.createElement(View, { as: "span", fontSize: "xl" }, (icons == null ? void 0 : icons.error) ?? import_react5.default.createElement(IconError, null)),
        errorMessage
      );
    default:
      return null;
  }
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileList/FileRemoveButton.mjs
var import_react6 = __toESM(require_react(), 1);
var FileRemoveButton = ({ altText, onClick }) => {
  const icons = useIcons("storageManager");
  return import_react6.default.createElement(
    Button,
    { size: "small", onClick, testId: "storage-manager-remove-button" },
    import_react6.default.createElement(VisuallyHidden, null, altText),
    import_react6.default.createElement(View, { as: "span", "aria-hidden": true, fontSize: "medium" }, (icons == null ? void 0 : icons.remove) ?? import_react6.default.createElement(IconClose, null))
  );
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileList/FileDetails.mjs
var import_react7 = __toESM(require_react(), 1);
var UploadDetails = ({ displayName, fileSize }) => {
  return import_react7.default.createElement(
    import_react7.default.Fragment,
    null,
    import_react7.default.createElement(
      View,
      { className: ComponentClassName.FileUploaderFileMain },
      import_react7.default.createElement(Text, { className: ComponentClassName.FileUploaderFileName }, displayName)
    ),
    import_react7.default.createElement(Text, { as: "span", className: ComponentClassName.FileUploaderFileSize }, fileSize ? humanFileSize(fileSize, true) : "")
  );
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileList/FileThumbnail.mjs
var import_react8 = __toESM(require_react(), 1);
var FileThumbnail = ({ fileName, isImage, url }) => {
  const icons = useIcons("storageManager");
  const thumbnail = isImage ? import_react8.default.createElement(Image, { alt: fileName, src: url }) : (icons == null ? void 0 : icons.file) ?? import_react8.default.createElement(IconFile, null);
  return import_react8.default.createElement(View, { className: ComponentClassName.FileUploaderFileImage }, thumbnail);
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileList/FileControl.mjs
function FileControl({ onPause, onResume, displayName, errorMessage, isImage, isResumable, loaderIsDeterminate, onRemove, progress, showThumbnails = true, size, status, displayText, thumbnailUrl }) {
  const { getPausedText, getUploadingText, uploadSuccessfulText, pauseButtonText, resumeButtonText } = displayText;
  return import_react9.default.createElement(
    View,
    { className: ComponentClassName.FileUploaderFile },
    import_react9.default.createElement(
      View,
      { className: ComponentClassName.FileUploaderFileWrapper },
      showThumbnails ? import_react9.default.createElement(FileThumbnail, { isImage, fileName: displayName, url: thumbnailUrl }) : null,
      import_react9.default.createElement(UploadDetails, { displayName, fileSize: size }),
      status === FileStatus.UPLOADING ? import_react9.default.createElement(Loader, { className: ComponentClassName.FileUploaderLoader, variation: "linear", percentage: progress, isDeterminate: loaderIsDeterminate, isPercentageTextHidden: true }) : null,
      isResumable && (status === FileStatus.UPLOADING || status === FileStatus.PAUSED) ? status === FileStatus.PAUSED ? import_react9.default.createElement(Button, { onClick: onResume, size: "small", variation: "link" }, resumeButtonText) : import_react9.default.createElement(Button, { onClick: onPause, size: "small", variation: "link" }, pauseButtonText) : null,
      import_react9.default.createElement(FileRemoveButton, { altText: `Remove file ${displayName}`, onClick: onRemove })
    ),
    import_react9.default.createElement(FileStatusMessage, { uploadSuccessfulText, getUploadingText, getPausedText, status, errorMessage, percentage: progress })
  );
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileList/FileList.mjs
function FileList({ displayText, files, hasMaxFilesError, isResumable, onCancelUpload, onDeleteUpload, onResume, onPause, showThumbnails, maxFileCount }) {
  if (files.length < 1) {
    return null;
  }
  const { getMaxFilesErrorText } = displayText;
  const headingMaxFiles = getMaxFilesErrorText(maxFileCount);
  return import_react10.default.createElement(
    View,
    { className: ComponentClassName.FileUploaderFileList },
    files.map((storageFile) => {
      const { file, status, progress, error, key, isImage, id, uploadTask } = storageFile;
      const thumbnailUrl = file && isImage ? URL.createObjectURL(file) : "";
      const loaderIsDeterminate = isResumable ? progress > 0 : true;
      const isUploading = status === FileStatus.UPLOADING;
      const onRemove = () => {
        if (isResumable && (status === FileStatus.UPLOADING || status === FileStatus.PAUSED) && uploadTask) {
          onCancelUpload({ id, uploadTask });
        } else {
          onDeleteUpload({ id });
        }
      };
      const handlePauseUpload = () => {
        if (uploadTask) {
          onPause({ id, uploadTask });
        }
      };
      const handleResumeUpload = () => {
        if (uploadTask) {
          onResume({ id, uploadTask });
        }
      };
      return import_react10.default.createElement(FileControl, { displayName: key, errorMessage: error, displayText, isImage, isUploading, isResumable, key: id, loaderIsDeterminate, onRemove, onPause: handlePauseUpload, onResume: handleResumeUpload, progress, showThumbnails, size: file == null ? void 0 : file.size, status, thumbnailUrl });
    }),
    hasMaxFilesError && import_react10.default.createElement(Alert, { variation: "error", heading: headingMaxFiles })
  );
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileListHeader/FileListHeader.mjs
var import_react11 = __toESM(require_react(), 1);
function FileListHeader({ allUploadsSuccessful, displayText, fileCount, remainingFilesCount, selectedFilesCount = 0 }) {
  const { getFilesUploadedText, getRemainingFilesText, getSelectedFilesText } = displayText;
  return import_react11.default.createElement(Text, { className: ComponentClassName.FileUploaderPreviewerText }, selectedFilesCount ? getSelectedFilesText(selectedFilesCount) : allUploadsSuccessful ? getFilesUploadedText(fileCount) : getRemainingFilesText(remainingFilesCount));
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FileListFooter/FileListFooter.mjs
var import_react12 = __toESM(require_react(), 1);
function FileListFooter({ displayText, remainingFilesCount, onClearAll, onUploadAll }) {
  const { clearAllButtonText, getUploadButtonText } = displayText;
  return import_react12.default.createElement(
    View,
    { className: ComponentClassName.FileUploaderPreviewerFooter },
    import_react12.default.createElement(
      View,
      { className: ComponentClassName.FileUploaderPreviewerActions },
      import_react12.default.createElement(Button, { size: "small", variation: "link", onClick: onClearAll }, clearAllButtonText),
      import_react12.default.createElement(Button, { size: "small", variation: "primary", onClick: onUploadAll }, getUploadButtonText(remainingFilesCount))
    )
  );
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/ui/FilePicker/FilePicker.mjs
var import_react13 = __toESM(require_react(), 1);
function FilePicker({ children, className = ComponentClassName.FileUploaderFilePicker, size = "small", ...props }) {
  return import_react13.default.createElement(Button, { ...props, className, size }, children);
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/utils/checkMaxFileSize.mjs
var checkMaxFileSize = ({ file, getFileSizeErrorText, maxFileSize }) => {
  if (maxFileSize === void 0)
    return "";
  if (file.size > maxFileSize) {
    return getFileSizeErrorText(humanFileSize(maxFileSize, true));
  }
  return "";
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/utils/displayText.mjs
var defaultFileUploaderDisplayText = {
  getFilesUploadedText(count) {
    return `${count} ${count === 1 ? "file uploaded" : "files uploaded"}`;
  },
  getFileSizeErrorText(sizeText) {
    return `File size must be below ${sizeText}`;
  },
  getRemainingFilesText(count) {
    return `${count} ${count === 1 ? "file" : "files"} uploading`;
  },
  getSelectedFilesText(count) {
    return `${count} ${count === 1 ? "file" : "files"} selected`;
  },
  getUploadingText(percentage) {
    return `Uploading${percentage > 0 ? `: ${percentage}%` : ""}`;
  },
  getUploadButtonText(count) {
    return `Upload ${count} ${count === 1 ? "file" : "files"}`;
  },
  getMaxFilesErrorText(count) {
    return `Cannot choose more than ${count} ${count === 1 ? "file" : "files"}. Remove files before updating`;
  },
  getErrorText(message) {
    return message;
  },
  doneButtonText: "Done",
  clearAllButtonText: "Clear all",
  extensionNotAllowedText: "Extension not allowed",
  browseFilesText: "Browse files",
  dropFilesText: "Drop files here or",
  pauseButtonText: "Pause",
  resumeButtonText: "Resume",
  uploadSuccessfulText: "Uploaded",
  getPausedText(percentage) {
    return `Paused: ${percentage}%`;
  }
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/utils/filterAllowedFiles.mjs
var filterAllowedFiles = (files, acceptedFileTypes) => {
  if (!acceptedFileTypes || acceptedFileTypes.length === 0 || acceptedFileTypes.includes("*")) {
    return files;
  }
  return files.filter((file) => {
    const fileName = file.name || "";
    const mimeType = (file.type || "").toLowerCase();
    const baseMimeType = mimeType.replace(/\/.*$/, "");
    return acceptedFileTypes.some((type) => {
      const validType = type.trim().toLowerCase();
      if (validType.charAt(0) === ".") {
        return fileName.toLowerCase().endsWith(validType);
      } else if (validType.endsWith("/*")) {
        return baseMimeType === validType.replace(/\/.*$/, "");
      }
      return mimeType === validType;
    });
  });
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/version.mjs
var VERSION = "3.3.9";

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/FileUploader/FileUploader.mjs
var logger = getLogger("Storage");
var MISSING_REQUIRED_PROPS_MESSAGE = "`FileUploader` requires a `maxFileCount` prop to be provided.";
var ACCESS_LEVEL_WITH_PATH_CALLBACK_MESSAGE = "`FileUploader` does not allow usage of a `path` callback prop with an `accessLevel` prop.";
var ACCESS_LEVEL_DEPRECATION_MESSAGE = "`accessLevel` has been deprecated and will be removed in a future major version. See migration notes at https://ui.docs.amplify.aws/react/connected-components/storage/FileUploader";
var FileUploaderBase = React10.forwardRef(function FileUploader({ acceptedFileTypes = [], accessLevel, autoUpload = true, components, defaultFiles, displayText: overrideDisplayText, isResumable = false, maxFileCount, maxFileSize, onFileRemove, onUploadError, onUploadStart, onUploadSuccess, path, processFile, showThumbnails = true, useAccelerateEndpoint }, ref) {
  if (!maxFileCount) {
    console.warn(MISSING_REQUIRED_PROPS_MESSAGE);
  }
  if (accessLevel && typeof path === "function") {
    throw new Error(ACCESS_LEVEL_WITH_PATH_CALLBACK_MESSAGE);
  }
  useDeprecationWarning({
    message: ACCESS_LEVEL_DEPRECATION_MESSAGE,
    shouldWarn: !!accessLevel
  });
  const Components = {
    Container,
    DropZone,
    FileList,
    FilePicker,
    FileListHeader,
    FileListFooter,
    ...components
  };
  const allowMultipleFiles = maxFileCount === void 0 || typeof maxFileCount === "number" && maxFileCount > 1;
  const displayText = {
    ...defaultFileUploaderDisplayText,
    ...overrideDisplayText
  };
  const { getFileSizeErrorText } = displayText;
  const getMaxFileSizeErrorMessage = (file) => {
    return checkMaxFileSize({
      file,
      maxFileSize,
      getFileSizeErrorText
    });
  };
  const { addFiles, clearFiles, files, removeUpload, queueFiles, setUploadingFile, setUploadPaused, setUploadProgress, setUploadSuccess, setUploadResumed } = useFileUploader(defaultFiles);
  React10.useImperativeHandle(ref, () => ({ clearFiles }));
  const { dragState, ...dropZoneProps } = useDropZone({
    acceptedFileTypes,
    onDropComplete: ({ acceptedFiles, rejectedFiles }) => {
      if (rejectedFiles && rejectedFiles.length > 0) {
        logger.warn("Rejected files: ", rejectedFiles);
      }
      const _acceptedFiles = filterAllowedFiles(acceptedFiles, acceptedFileTypes);
      addFiles({
        files: _acceptedFiles,
        status: autoUpload ? FileStatus.QUEUED : FileStatus.ADDED,
        getFileErrorMessage: getMaxFileSizeErrorMessage
      });
    }
  });
  useUploadFiles({
    accessLevel,
    files,
    isResumable,
    maxFileCount,
    onUploadError,
    onUploadSuccess,
    onUploadStart,
    setUploadingFile,
    setUploadProgress,
    setUploadSuccess,
    processFile,
    path,
    useAccelerateEndpoint
  });
  const onFilePickerChange = (event) => {
    const { files: files2 } = event.target;
    if (!files2 || files2.length === 0) {
      return;
    }
    addFiles({
      files: Array.from(files2),
      status: autoUpload ? FileStatus.QUEUED : FileStatus.ADDED,
      getFileErrorMessage: getMaxFileSizeErrorMessage
    });
  };
  const onClearAll = () => {
    clearFiles();
  };
  const onUploadAll = () => {
    queueFiles();
  };
  const onPauseUpload = ({ id, uploadTask }) => {
    uploadTask.pause();
    setUploadPaused({ id });
  };
  const onResumeUpload = ({ id, uploadTask }) => {
    uploadTask.resume();
    setUploadResumed({ id });
  };
  const onCancelUpload = ({ id, uploadTask }) => {
    uploadTask.pause();
    removeUpload({ id });
  };
  const onDeleteUpload = ({ id }) => {
    removeUpload({ id });
    if (typeof onFileRemove === "function") {
      const file = files.find((file2) => file2.id === id);
      if (file) {
        const key = file.resolvedKey ?? file.key;
        onFileRemove({ key });
      }
    }
  };
  const allUploadsSuccessful = files.length === 0 ? false : files.every((file) => (file == null ? void 0 : file.status) === FileStatus.UPLOADED);
  const hasMaxFilesError = files.filter((file) => file.progress < 100).length > maxFileCount;
  const uploadedFilesLength = files.filter((file) => (file == null ? void 0 : file.status) === FileStatus.UPLOADED).length;
  const remainingFilesCount = files.length - uploadedFilesLength;
  const selectedFilesCount = autoUpload ? 0 : remainingFilesCount;
  const hasFiles = files.length > 0;
  const hasUploadActions = !autoUpload && remainingFilesCount > 0;
  const hiddenInput = React10.useRef(null);
  function handleClick() {
    if (hiddenInput.current) {
      hiddenInput.current.click();
      hiddenInput.current.value = "";
    }
  }
  useSetUserAgent({
    componentName: "FileUploader",
    packageName: "react-storage",
    version: VERSION
  });
  return React10.createElement(
    Components.Container,
    { className: `${ComponentClassName.FileUploader} ${hasFiles ? ComponentClassName.FileUploaderPreviewer : ""}` },
    React10.createElement(
      Components.DropZone,
      { inDropZone: dragState !== "inactive", ...dropZoneProps, displayText },
      React10.createElement(
        React10.Fragment,
        null,
        React10.createElement(Components.FilePicker, { onClick: handleClick }, displayText.browseFilesText),
        React10.createElement(
          VisuallyHidden,
          null,
          React10.createElement("input", { type: "file", tabIndex: -1, ref: hiddenInput, onChange: onFilePickerChange, multiple: allowMultipleFiles, accept: acceptedFileTypes.join(",") })
        )
      )
    ),
    hasFiles ? React10.createElement(Components.FileListHeader, { allUploadsSuccessful, displayText, fileCount: files.length, remainingFilesCount, selectedFilesCount }) : null,
    React10.createElement(Components.FileList, { displayText, files, isResumable, onCancelUpload, onDeleteUpload, onResume: onResumeUpload, onPause: onPauseUpload, showThumbnails, hasMaxFilesError, maxFileCount }),
    hasUploadActions ? React10.createElement(Components.FileListFooter, { displayText, remainingFilesCount, onClearAll, onUploadAll }) : null
  );
});
var FileUploader2 = Object.assign({}, FileUploaderBase, {
  Container,
  DropZone,
  FileList,
  FileListHeader,
  FileListFooter,
  FilePicker
});

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageImage/StorageImage.mjs
var React11 = __toESM(require_react(), 1);
var MISSING_REQUIRED_PROP_MESSAGE = "`StorageImage` requires either an `imgKey` or `path` prop.";
var HAS_DEPRECATED_PROPS_MESSAGE = "`imgKey`, `accessLevel`, and `identityId` will be replaced with `path` in a future major version. See https://ui.docs.amplify.aws/react/connected-components/storage/storageimage#props";
var HAS_PATH_AND_KEY_MESSAGE = "`imgKey` is ignored when both `imgKey` and `path` props are provided.";
var HAS_PATH_AND_UNSUPPORTED_OPTIONS_MESSAGE = "`accessLevel` and `identityId` are ignored when the `path` prop is provided.";
var getDeprecationMessage = ({ hasImgkey, hasPath, hasDeprecatedOptions }) => {
  let message = "";
  if (hasPath && hasImgkey) {
    message = HAS_PATH_AND_KEY_MESSAGE;
  } else if (hasPath && hasDeprecatedOptions) {
    message = HAS_PATH_AND_UNSUPPORTED_OPTIONS_MESSAGE;
  } else if (hasImgkey) {
    message = HAS_DEPRECATED_PROPS_MESSAGE;
  }
  return message;
};
var StorageImage = ({ accessLevel, className, fallbackSrc, identityId, imgKey, path, onStorageGetError, onGetUrlError, validateObjectExistence = true, ...rest }) => {
  const hasImgkey = !!imgKey;
  const hasPath = !!path;
  const hasDeprecatedOptions = !!accessLevel || !!identityId;
  const message = getDeprecationMessage({
    hasDeprecatedOptions,
    hasImgkey,
    hasPath
  });
  useDeprecationWarning2({ message, shouldWarn: !!message });
  if (!hasImgkey && !hasPath) {
    throw new Error(MISSING_REQUIRED_PROP_MESSAGE);
  }
  useSetUserAgent({
    componentName: "StorageImage",
    packageName: "react-storage",
    version: VERSION
  });
  const onError = onGetUrlError ?? onStorageGetError;
  const input = React11.useMemo(() => ({
    ...path ? { path } : { key: imgKey },
    onError,
    options: {
      accessLevel,
      targetIdentityId: identityId,
      validateObjectExistence
    }
  }), [accessLevel, imgKey, identityId, onError, path, validateObjectExistence]);
  const { url } = useGetUrl(input);
  return React11.createElement(Image, { ...rest, className: classNames(ComponentClassName.StorageImage, className), src: (url == null ? void 0 : url.toString()) ?? fallbackSrc });
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/StorageManager.mjs
var React12 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/Container/Container.mjs
var import_react14 = __toESM(require_react(), 1);
function Container2({ children, className }) {
  return import_react14.default.createElement(View, { className }, children);
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/DropZone/DropZone.mjs
var import_react15 = __toESM(require_react(), 1);
function DropZone2({ children, displayText, inDropZone, onDragEnter, onDragLeave, onDragOver, onDragStart, onDrop, testId }) {
  const { dropFilesText } = displayText;
  const icons = useIcons("storageManager");
  return import_react15.default.createElement(
    View,
    { className: classNames(inDropZone && classNameModifier(ComponentClassName.StorageManagerDropZone, "active"), ComponentClassName.StorageManagerDropZone), "data-testid": testId, onDragStart, onDragEnter, onDragLeave, onDrop, onDragOver },
    import_react15.default.createElement(View, { as: "span", "aria-hidden": true, className: ComponentClassName.StorageManagerDropZoneIcon }, (icons == null ? void 0 : icons.upload) ?? import_react15.default.createElement(IconUpload, null)),
    import_react15.default.createElement(Text, { className: ComponentClassName.StorageManagerDropZoneText }, dropFilesText),
    children
  );
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileList/FileList.mjs
var import_react21 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileList/FileControl.mjs
var import_react20 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileList/FileStatusMessage.mjs
var import_react16 = __toESM(require_react(), 1);
var FileStatusMessage2 = ({ errorMessage, getPausedText, getUploadingText, percentage, status, uploadSuccessfulText }) => {
  const icons = useIcons("storageManager");
  switch (status) {
    case FileStatus.UPLOADING: {
      return import_react16.default.createElement(Text, { className: ComponentClassName.StorageManagerFileStatus }, getUploadingText(percentage));
    }
    case FileStatus.PAUSED:
      return import_react16.default.createElement(Text, { className: ComponentClassName.StorageManagerFileStatus }, getPausedText(percentage));
    case FileStatus.UPLOADED:
      return import_react16.default.createElement(
        Text,
        { className: classNames(ComponentClassName.StorageManagerFileStatus, classNameModifier(ComponentClassName.StorageManagerFileStatus, "success")) },
        import_react16.default.createElement(View, { as: "span", fontSize: "xl" }, (icons == null ? void 0 : icons.success) ?? import_react16.default.createElement(IconCheck, null)),
        uploadSuccessfulText
      );
    case FileStatus.ERROR:
      return import_react16.default.createElement(
        Text,
        { className: classNames(ComponentClassName.StorageManagerFileStatus, classNameModifier(ComponentClassName.StorageManagerFileStatus, "error")) },
        import_react16.default.createElement(View, { as: "span", fontSize: "xl" }, (icons == null ? void 0 : icons.error) ?? import_react16.default.createElement(IconError, null)),
        errorMessage
      );
    default:
      return null;
  }
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileList/FileRemoveButton.mjs
var import_react17 = __toESM(require_react(), 1);
var FileRemoveButton2 = ({ altText, onClick }) => {
  const icons = useIcons("storageManager");
  return import_react17.default.createElement(
    Button,
    { size: "small", onClick, testId: "storage-manager-remove-button" },
    import_react17.default.createElement(VisuallyHidden, null, altText),
    import_react17.default.createElement(View, { as: "span", "aria-hidden": true, fontSize: "medium" }, (icons == null ? void 0 : icons.remove) ?? import_react17.default.createElement(IconClose, null))
  );
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileList/FileDetails.mjs
var import_react18 = __toESM(require_react(), 1);
var UploadDetails2 = ({ displayName, fileSize }) => {
  return import_react18.default.createElement(
    import_react18.default.Fragment,
    null,
    import_react18.default.createElement(
      View,
      { className: ComponentClassName.StorageManagerFileMain },
      import_react18.default.createElement(Text, { className: ComponentClassName.StorageManagerFileName }, displayName)
    ),
    import_react18.default.createElement(Text, { as: "span", className: ComponentClassName.StorageManagerFileSize }, fileSize ? humanFileSize(fileSize, true) : "")
  );
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileList/FileThumbnail.mjs
var import_react19 = __toESM(require_react(), 1);
var FileThumbnail2 = ({ fileName, isImage, url }) => {
  const icons = useIcons("storageManager");
  const thumbnail = isImage ? import_react19.default.createElement(Image, { alt: fileName, src: url }) : (icons == null ? void 0 : icons.file) ?? import_react19.default.createElement(IconFile, null);
  return import_react19.default.createElement(View, { className: ComponentClassName.StorageManagerFileImage }, thumbnail);
};

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileList/FileControl.mjs
function FileControl2({ onPause, onResume, displayName, errorMessage, isImage, isResumable, loaderIsDeterminate, onRemove, progress, showThumbnails = true, size, status, displayText, thumbnailUrl }) {
  const { getPausedText, getUploadingText, uploadSuccessfulText, pauseButtonText, resumeButtonText } = displayText;
  return import_react20.default.createElement(
    View,
    { className: ComponentClassName.StorageManagerFile },
    import_react20.default.createElement(
      View,
      { className: ComponentClassName.StorageManagerFileWrapper },
      showThumbnails ? import_react20.default.createElement(FileThumbnail2, { isImage, fileName: displayName, url: thumbnailUrl }) : null,
      import_react20.default.createElement(UploadDetails2, { displayName, fileSize: size }),
      status === FileStatus.UPLOADING ? import_react20.default.createElement(Loader, { className: ComponentClassName.StorageManagerLoader, variation: "linear", percentage: progress, isDeterminate: loaderIsDeterminate, isPercentageTextHidden: true }) : null,
      isResumable && (status === FileStatus.UPLOADING || status === FileStatus.PAUSED) ? status === FileStatus.PAUSED ? import_react20.default.createElement(Button, { onClick: onResume, size: "small", variation: "link" }, resumeButtonText) : import_react20.default.createElement(Button, { onClick: onPause, size: "small", variation: "link" }, pauseButtonText) : null,
      import_react20.default.createElement(FileRemoveButton2, { altText: `Remove file ${displayName}`, onClick: onRemove })
    ),
    import_react20.default.createElement(FileStatusMessage2, { uploadSuccessfulText, getUploadingText, getPausedText, status, errorMessage, percentage: progress })
  );
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileList/FileList.mjs
function FileList2({ displayText, files, hasMaxFilesError, isResumable, onCancelUpload, onDeleteUpload, onResume, onPause, showThumbnails, maxFileCount }) {
  if (files.length < 1) {
    return null;
  }
  const { getMaxFilesErrorText } = displayText;
  const headingMaxFiles = getMaxFilesErrorText(maxFileCount);
  return import_react21.default.createElement(
    View,
    { className: ComponentClassName.StorageManagerFileList },
    files.map((storageFile) => {
      const { file, status, progress, error, key, isImage, id, uploadTask } = storageFile;
      const thumbnailUrl = file && isImage ? URL.createObjectURL(file) : "";
      const loaderIsDeterminate = isResumable ? progress > 0 : true;
      const isUploading = status === FileStatus.UPLOADING;
      const onRemove = () => {
        if (isResumable && (status === FileStatus.UPLOADING || status === FileStatus.PAUSED) && uploadTask) {
          onCancelUpload({ id, uploadTask });
        } else {
          onDeleteUpload({ id });
        }
      };
      const handlePauseUpload = () => {
        if (uploadTask) {
          onPause({ id, uploadTask });
        }
      };
      const handleResumeUpload = () => {
        if (uploadTask) {
          onResume({ id, uploadTask });
        }
      };
      return import_react21.default.createElement(FileControl2, { displayName: key, errorMessage: error, displayText, isImage, isUploading, isResumable, key: id, loaderIsDeterminate, onRemove, onPause: handlePauseUpload, onResume: handleResumeUpload, progress, showThumbnails, size: file == null ? void 0 : file.size, status, thumbnailUrl });
    }),
    hasMaxFilesError && import_react21.default.createElement(Alert, { variation: "error", heading: headingMaxFiles })
  );
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileListHeader/FileListHeader.mjs
var import_react22 = __toESM(require_react(), 1);
function FileListHeader2({ allUploadsSuccessful, displayText, fileCount, remainingFilesCount, selectedFilesCount = 0 }) {
  const { getFilesUploadedText, getRemainingFilesText, getSelectedFilesText } = displayText;
  return import_react22.default.createElement(Text, { className: ComponentClassName.StorageManagerPreviewerText }, selectedFilesCount ? getSelectedFilesText(selectedFilesCount) : allUploadsSuccessful ? getFilesUploadedText(fileCount) : getRemainingFilesText(remainingFilesCount));
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FileListFooter/FileListFooter.mjs
var import_react23 = __toESM(require_react(), 1);
function FileListFooter2({ displayText, remainingFilesCount, onClearAll, onUploadAll }) {
  const { clearAllButtonText, getUploadButtonText } = displayText;
  return import_react23.default.createElement(
    View,
    { className: ComponentClassName.StorageManagerPreviewerFooter },
    import_react23.default.createElement(
      View,
      { className: ComponentClassName.StorageManagerPreviewerActions },
      import_react23.default.createElement(Button, { size: "small", variation: "link", onClick: onClearAll }, clearAllButtonText),
      import_react23.default.createElement(Button, { size: "small", variation: "primary", onClick: onUploadAll }, getUploadButtonText(remainingFilesCount))
    )
  );
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/ui/FilePicker/FilePicker.mjs
var import_react24 = __toESM(require_react(), 1);
function FilePicker2({ children, className = ComponentClassName.StorageManagerFilePicker, size = "small", ...props }) {
  return import_react24.default.createElement(Button, { ...props, className, size }, children);
}

// node_modules/@aws-amplify/ui-react-storage/dist/esm/components/StorageManager/StorageManager.mjs
var logger2 = getLogger("Storage");
var MISSING_REQUIRED_PROPS_MESSAGE2 = "`StorageManager` requires a `maxFileCount` prop to be provided.";
var ACCESS_LEVEL_WITH_PATH_CALLBACK_MESSAGE2 = "`StorageManager` does not allow usage of a `path` callback prop with an `accessLevel` prop.";
var ACCESS_LEVEL_DEPRECATION_MESSAGE2 = "`accessLevel` has been deprecated and will be removed in a future major version. See migration notes at https://ui.docs.amplify.aws/react/connected-components/storage/storagemanager";
var StorageManagerBase = React12.forwardRef(function StorageManager({ acceptedFileTypes = [], accessLevel, autoUpload = true, components, defaultFiles, displayText: overrideDisplayText, isResumable = false, maxFileCount, maxFileSize, onFileRemove, onUploadError, onUploadStart, onUploadSuccess, path, processFile, showThumbnails = true, useAccelerateEndpoint }, ref) {
  useDeprecationWarning({
    message: "The `StorageManager` component has been renamed as the `FileUploader` component.",
    shouldWarn: false
  });
  if (!maxFileCount) {
    console.warn(MISSING_REQUIRED_PROPS_MESSAGE2);
  }
  if (accessLevel && typeof path === "function") {
    throw new Error(ACCESS_LEVEL_WITH_PATH_CALLBACK_MESSAGE2);
  }
  useDeprecationWarning({
    message: ACCESS_LEVEL_DEPRECATION_MESSAGE2,
    shouldWarn: !!accessLevel
  });
  const Components = {
    Container: Container2,
    DropZone: DropZone2,
    FileList: FileList2,
    FilePicker: FilePicker2,
    FileListHeader: FileListHeader2,
    FileListFooter: FileListFooter2,
    ...components
  };
  const allowMultipleFiles = maxFileCount === void 0 || typeof maxFileCount === "number" && maxFileCount > 1;
  const displayText = {
    ...defaultFileUploaderDisplayText,
    ...overrideDisplayText
  };
  const { getFileSizeErrorText } = displayText;
  const getMaxFileSizeErrorMessage = (file) => {
    return checkMaxFileSize({
      file,
      maxFileSize,
      getFileSizeErrorText
    });
  };
  const { addFiles, clearFiles, files, removeUpload, queueFiles, setUploadingFile, setUploadPaused, setUploadProgress, setUploadSuccess, setUploadResumed } = useFileUploader(defaultFiles);
  React12.useImperativeHandle(ref, () => ({ clearFiles }));
  const { dragState, ...dropZoneProps } = useDropZone({
    acceptedFileTypes,
    onDropComplete: ({ acceptedFiles, rejectedFiles }) => {
      if (rejectedFiles && rejectedFiles.length > 0) {
        logger2.warn("Rejected files: ", rejectedFiles);
      }
      const _acceptedFiles = filterAllowedFiles(acceptedFiles, acceptedFileTypes);
      addFiles({
        files: _acceptedFiles,
        status: autoUpload ? FileStatus.QUEUED : FileStatus.ADDED,
        getFileErrorMessage: getMaxFileSizeErrorMessage
      });
    }
  });
  useUploadFiles({
    accessLevel,
    files,
    isResumable,
    maxFileCount,
    onUploadError,
    onUploadSuccess,
    onUploadStart,
    setUploadingFile,
    setUploadProgress,
    setUploadSuccess,
    processFile,
    path,
    useAccelerateEndpoint
  });
  const onFilePickerChange = (event) => {
    const { files: files2 } = event.target;
    if (!files2 || files2.length === 0) {
      return;
    }
    addFiles({
      files: Array.from(files2),
      status: autoUpload ? FileStatus.QUEUED : FileStatus.ADDED,
      getFileErrorMessage: getMaxFileSizeErrorMessage
    });
  };
  const onClearAll = () => {
    clearFiles();
  };
  const onUploadAll = () => {
    queueFiles();
  };
  const onPauseUpload = ({ id, uploadTask }) => {
    uploadTask.pause();
    setUploadPaused({ id });
  };
  const onResumeUpload = ({ id, uploadTask }) => {
    uploadTask.resume();
    setUploadResumed({ id });
  };
  const onCancelUpload = ({ id, uploadTask }) => {
    uploadTask.pause();
    removeUpload({ id });
  };
  const onDeleteUpload = ({ id }) => {
    removeUpload({ id });
    if (typeof onFileRemove === "function") {
      const file = files.find((file2) => file2.id === id);
      if (file) {
        const key = file.resolvedKey ?? file.key;
        onFileRemove({ key });
      }
    }
  };
  const allUploadsSuccessful = files.length === 0 ? false : files.every((file) => (file == null ? void 0 : file.status) === FileStatus.UPLOADED);
  const hasMaxFilesError = files.filter((file) => file.progress < 100).length > maxFileCount;
  const uploadedFilesLength = files.filter((file) => (file == null ? void 0 : file.status) === FileStatus.UPLOADED).length;
  const remainingFilesCount = files.length - uploadedFilesLength;
  const selectedFilesCount = autoUpload ? 0 : remainingFilesCount;
  const hasFiles = files.length > 0;
  const hasUploadActions = !autoUpload && remainingFilesCount > 0;
  const hiddenInput = React12.useRef(null);
  function handleClick() {
    if (hiddenInput.current) {
      hiddenInput.current.click();
      hiddenInput.current.value = "";
    }
  }
  useSetUserAgent({
    componentName: "StorageManager",
    packageName: "react-storage",
    version: VERSION
  });
  return React12.createElement(
    Components.Container,
    { className: `${ComponentClassName.StorageManager} ${hasFiles ? ComponentClassName.StorageManagerPreviewer : ""}` },
    React12.createElement(
      Components.DropZone,
      { inDropZone: dragState !== "inactive", ...dropZoneProps, displayText },
      React12.createElement(
        React12.Fragment,
        null,
        React12.createElement(Components.FilePicker, { onClick: handleClick }, displayText.browseFilesText),
        React12.createElement(
          VisuallyHidden,
          null,
          React12.createElement("input", { type: "file", tabIndex: -1, ref: hiddenInput, onChange: onFilePickerChange, multiple: allowMultipleFiles, accept: acceptedFileTypes.join(",") })
        )
      )
    ),
    hasFiles ? React12.createElement(Components.FileListHeader, { allUploadsSuccessful, displayText, fileCount: files.length, remainingFilesCount, selectedFilesCount }) : null,
    React12.createElement(Components.FileList, { displayText, files, isResumable, onCancelUpload, onDeleteUpload, onResume: onResumeUpload, onPause: onPauseUpload, showThumbnails, hasMaxFilesError, maxFileCount }),
    hasUploadActions ? React12.createElement(Components.FileListFooter, { displayText, remainingFilesCount, onClearAll, onUploadAll }) : null
  );
});
var StorageManager2 = Object.assign({}, StorageManagerBase, {
  Container: Container2,
  DropZone: DropZone2,
  FileList: FileList2,
  FileListHeader: FileListHeader2,
  FileListFooter: FileListFooter2,
  FilePicker: FilePicker2
});
export {
  FileUploader2 as FileUploader,
  StorageImage,
  StorageManager2 as StorageManager
};
//# sourceMappingURL=@aws-amplify_ui-react-storage.js.map
